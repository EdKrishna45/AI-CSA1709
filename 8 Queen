N = 8
def print_solution(board):
    for row in board:
        line = ""
        for cell in row:
            line += "Q " if cell else ". "
        print(line)
    print()
def is_safe(board, row, col):
    # Check this column
    for i in range(row):
        if board[i][col]:
            return False
    # Check upper left diagonal
    for i, j in zip(range(row - 1, -1, -1), range(col - 1, -1, -1)):
        if board[i][j]:
            return False
    # Check upper right diagonal
    for i, j in zip(range(row - 1, -1, -1), range(col + 1, N)):
        if board[i][j]:
            return False
    return True
def solve_nqueens(board, row):
    if row == N:
        print_solution(board)
        return True
    res = False
    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1
            res = solve_nqueens(board, row + 1) or res
            board[row][col] = 0  # backtrack
    return res
def main():
    board = [[0 for _ in range(N)] for _ in range(N)]
    if not solve_nqueens(board, 0):
        print("No solution exists.")
if _name_ == "_main_":
    main()
